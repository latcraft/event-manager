
plugins {
  id 'groovy'
  id 'idea'
  id 'jp.classmethod.aws.lambda' version '0.28'
}

repositories {
  mavenCentral()
}

aws {
  region = "eu-west-1"
}

dependencies {
  compile 'org.codehaus.groovy:groovy-all:2.4.8'
  compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
  compile 'com.amazonaws:aws-lambda-java-core:1.1.0'
  compile 'com.amazonaws:aws-lambda-java-events:1.3.0'
  compile 'com.amazonaws:aws-java-sdk-lambda:1.11.125'
  compile 'com.amazonaws:aws-java-sdk-kms:1.11.125'
  compile 'com.amazonaws:aws-java-sdk-s3:1.11.125'
  compile 'com.google.zxing:core:3.2.0'
  compile 'com.google.zxing:javase:3.2.0'
  compile 'org.apache.xmlgraphics:batik-transcoder:1.9'
  compile 'org.apache.xmlgraphics:batik-codec:1.9'
  compile 'org.apache.xmlgraphics:xmlgraphics-commons:2.2'
  compile 'org.apache.xmlgraphics:fop:2.2'
  compile "org.twitter4j:twitter4j-core:4.0.4"
  compile "org.twitter4j:twitter4j-stream:4.0.4"
  compile "org.twitter4j:twitter4j-async:4.0.4"
  compile "org.twitter4j:twitter4j-media-support:4.0.4"
  compile "org.twitter4j:twitter4j-httpclient-support:2.2.6"
  compile 'log4j:log4j:1.2.17'
  testCompile 'junit:junit:4.12'
}

task buildZip(type: Zip, dependsOn: classes) {
  from compileGroovy
  from processResources
  into ('fonts') {
    from file('src/main/resources/fonts')
  }
  into('lib') {
    from configurations.runtime
  }           
}

build.dependsOn buildZip

test {
  systemProperties = System.getProperties().findAll { key, value ->
    key.startsWith('latcraft')
  } + project.properties.findAll { key, value ->
    key.startsWith('latcraft')
  } + gradle.properties.findAll { key, value ->
    key.startsWith('latcraft')
  }
}

ext {
  
  forEachLambdaTask = { Closure cl ->
    file('src/main/groovy/lv/latcraft/event/tasks').eachFile { File taskFile ->
      if (taskFile.file && taskFile.name.endsWith('.groovy') && !taskFile.name.startsWith('BaseTask')) {

        String[] elements = taskFile.name.replaceAll(/\.groovy$/, '').split("(?<!(^|[A-Z]))(?=[A-Z])|(?<!^)(?=[A-Z][a-z])")

        String className = elements.join('')
        String functionName = elements.collect{ it.toLowerCase() }.join('_')
        String functionDescription = elements.join(' ')

        cl(taskFile, functionName, functionDescription, className)
        
      }
    }
  }
  
}

forEachLambdaTask { File taskFile, String functionName, String functionDescription, String className ->
  String taskName = className.substring(0, 1).toLowerCase() + className.substring(1)
  task(taskName, type: JavaExec, group: "event manager") {
    main = "lv.latcraft.event.tasks.${className}"
    classpath = sourceSets.main.runtimeClasspath
  }
}

task generateFunctionDefinitions {
  doLast {
    String functionsTerraformContent = ""
    List<String> functions = []
    forEachLambdaTask { File taskFile, String functionName, String functionDescription, String className ->

      functions << functionName

      functionsTerraformContent += """
resource "aws_lambda_function" "${functionName}_function" {
  s3_bucket               = "\${aws_s3_bucket.latcraft_code.bucket}"
  s3_key                  = "event-manager.zip"
  function_name           = "${functionName}_function"
  description             = "${functionDescription}"
  role                    = "\${aws_iam_role.latcraft_lambda_executor.arn}"
  handler                 = "\${var.lambda_code_package_prefix}.${className}::\${var.lambda_code_default_method}"
  runtime                 = "java8"
  memory_size             = "512"
  timeout                 = "300"
  kms_key_arn             = "\${aws_kms_key.latcraft_kms_key.arn}"
  environment {
    variables = {
      HOME                = "/var/task"
      JAVA_FONTS          = "/var/task/fonts"
    }
  }
}

resource "aws_lambda_alias" "${functionName}_function_alias" {
  name                    = "${functionName}_function_latest"
  function_name           = "\${aws_lambda_function.${functionName}_function.arn}"
  function_version        = "\$LATEST"
}

"""

    }
    String functionArnList = (functions + "craftbot").collect { "\"\${aws_lambda_function.${it}_function.arn}\"" }.join(', ')
    String lambdaPolicyTerraformContent = """
resource "aws_iam_role_policy" "latcraft_lambda_executor_policy" {
  name                  = "latcraft_lambda_executor_policy"
  role                  = "\${aws_iam_role.latcraft_lambda_executor.id}"
  policy                = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "logs:PutLogEvents",
          "logs:GetLogEvents",
          "logs:FilterLogEvents"
      ],
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "kms:Encrypt",
        "kms:Decrypt",
        "kms:ReEncrypt*",
        "kms:GenerateDataKey*",
        "kms:DescribeKey"
      ],
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:ListBucket"
      ],
      "Resource": [
        "\${aws_s3_bucket.latcraft_images.arn}",
        "\${aws_s3_bucket.latcraft_code.arn}"
      ]
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:PutObject",
        "s3:PutObjectAcl",
        "s3:GetObject",
        "s3:GetObjectAcl"
      ],
      "Resource": [
        "\${aws_s3_bucket.latcraft_images.arn}/*",
        "\${aws_s3_bucket.latcraft_code.arn}/*"
      ]
    },
    {
        "Effect": "Allow",
        "Action": [
            "lambda:InvokeFunction"
        ],
        "Resource": [
          ${functionArnList}
        ]
    }
  ]
}
EOF
}
"""
    file('src/main/terraform/30_functions.tf').text = functionsTerraformContent + lambdaPolicyTerraformContent
  }
}

task generateApiMethodDefinitions {
  doLast {
    String apiMethodsTerraformContent = ""
    List<String> functions = []
    forEachLambdaTask { File taskFile, String functionName, String functionDescription, String methodName ->

      functions << functionName

      apiMethodsTerraformContent += """
resource "aws_lambda_permission" "${functionName}_function_api_gatewaypermission" {
  statement_id            = "AllowExecutionFromAPIGateway"
  action                  = "lambda:InvokeFunction"
  function_name           = "\${aws_lambda_function.${functionName}_function.arn}"
  qualifier               = "\${aws_lambda_alias.${functionName}_function_alias.name}"
  principal               = "apigateway.amazonaws.com"
  source_arn              = "arn:aws:execute-api:\${var.aws_region}:\${data.aws_caller_identity.current.account_id}:\${aws_api_gateway_rest_api.latcraft_api.id}/*/POST/\${aws_api_gateway_resource.LatCraftAPI${methodName}.path_part}"
}

resource "aws_api_gateway_resource" "LatCraftAPI${methodName}" {
  rest_api_id             = "\${aws_api_gateway_rest_api.latcraft_api.id}"
  parent_id               = "\${aws_api_gateway_rest_api.latcraft_api.root_resource_id}"
  path_part               = "${functionName}"
}

resource "aws_api_gateway_method" "LatCraftAPI${methodName}POST" {
  api_key_required        = true
  rest_api_id             = "\${aws_api_gateway_rest_api.latcraft_api.id}"
  resource_id             = "\${aws_api_gateway_resource.LatCraftAPI${methodName}.id}"
  http_method             = "POST"
  authorization           = "NONE"
}

resource "aws_api_gateway_integration" "LatCraftAPI${methodName}POSTIntegration" {
  rest_api_id             = "\${aws_api_gateway_rest_api.latcraft_api.id}"
  resource_id             = "\${aws_api_gateway_resource.LatCraftAPI${methodName}.id}"
  http_method             = "\${aws_api_gateway_method.LatCraftAPI${methodName}POST.http_method}"
  integration_http_method = "POST"
  type                    = "AWS"
  credentials             = "\${aws_iam_role.latcraft_api_executor.arn}"
  uri                     = "arn:aws:apigateway:\${var.aws_region}:lambda:path/2015-03-31/functions/arn:aws:lambda:\${var.aws_region}:\${data.aws_caller_identity.current.account_id}:function:\${aws_lambda_function.${functionName}_function.function_name}/invocations"
}

resource "aws_api_gateway_method_response" "LatCraftAPI${methodName}POSTResponse" {
  rest_api_id             = "\${aws_api_gateway_rest_api.latcraft_api.id}"
  resource_id             = "\${aws_api_gateway_resource.LatCraftAPI${methodName}.id}"
  http_method             = "\${aws_api_gateway_method.LatCraftAPI${methodName}POST.http_method}"
  status_code             = "200"
  response_models         = {
    "application/json" = "Empty"
  }
}

resource "aws_api_gateway_method_response" "LatCraftAPI${methodName}POSTError" {
  rest_api_id             = "\${aws_api_gateway_rest_api.latcraft_api.id}"
  resource_id             = "\${aws_api_gateway_resource.LatCraftAPI${methodName}.id}"
  http_method             = "\${aws_api_gateway_method.LatCraftAPI${methodName}POST.http_method}"
  status_code             = "500"
  response_models         = {
    "application/json" = "Empty"
  }
}

resource "aws_api_gateway_integration_response" "LatCraftAPI${methodName}POSTIntegrationResponse" {
  rest_api_id             = "\${aws_api_gateway_rest_api.latcraft_api.id}"
  resource_id             = "\${aws_api_gateway_resource.LatCraftAPI${methodName}.id}"
  http_method             = "\${aws_api_gateway_method.LatCraftAPI${methodName}POST.http_method}"
  status_code             = "200"
  depends_on              = [
    "aws_api_gateway_integration.LatCraftAPI${methodName}POSTIntegration"
  ]  
}

"""

    }
    String functionArnList = (functions + "craftbot").collect { "\"\${aws_lambda_function.${it}_function.arn}\"" }.join(', ')
    String apiPolicyTerraformContent = """

resource "aws_iam_role_policy" "latcraft_api_executor_policy" {
  name = "latcraft_api_executor_policy"
  role = "\${aws_iam_role.latcraft_api_executor.id}"
  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "logs:PutLogEvents",
          "logs:GetLogEvents",
          "logs:FilterLogEvents"
      ],
      "Resource": "*"
    },
    {
        "Effect": "Allow",
        "Action": [
            "lambda:InvokeFunction"
        ],
        "Resource": [
          ${functionArnList}  
        ]
    }
  ]
}
EOF
}

"""
    file('src/main/terraform/50_api_methods.tf').text = apiPolicyTerraformContent + apiMethodsTerraformContent
  }
}

task generateUpdateCalls {
  doLast {
    forEachLambdaTask { File taskFile, String functionName, String functionDescription, String className ->
      println "aws lambda update-function-code --function-name ${functionName}_function --s3-bucket latcraft-code --s3-key event-manager.zip"
    }
    println "aws lambda update-function-code --function-name craftbot_function --s3-bucket latcraft-code --s3-key event-manager.zip"
  }
}

task generateTravisAfterDeploy {
  doLast {
    println "after_deploy:"
    forEachLambdaTask { File taskFile, String functionName, String functionDescription, String className ->
      println "  - \"aws lambda update-function-code --function-name ${functionName}_function --s3-bucket latcraft-code --s3-key event-manager.zip\""
    }
    println "  - \"aws lambda update-function-code --function-name craftbot_function --s3-bucket latcraft-code --s3-key event-manager.zip\""
  }
}
